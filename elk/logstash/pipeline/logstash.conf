input {
  tcp {
    port => 5556
  }
  udp {
    port => 5566
  }
}

filter {
  csv {
    separator => ","
    columns => [
     "os","reporting_computer","client_time" ,"full_server_time" ,"process_id" ,"process_name" ,
     "process_path" ,"protocol" ,"status" ,"source_port" ,"destination_port" ,"direction" ,"cast_type",
     "scramble_state" ,"source_ip" ,"destination_ip" ,"sequance_number" ,"sub_sequance_number" ,"user_name" ,
     "mog_counter" ,"destination_path" ,"reason" ,"dll_path" ,"dll_name" ,"chain_array"
    ]
  }
  mutate {convert => ["process_id","integer"]}
  mutate {convert => ["source_port","integer"]}
  mutate {convert => ["destination_port","integer"]}
  mutate {convert => ["sequance_number","integer"]}
  mutate {convert => ["mog_counter","integer"]}
}
output {
  elasticsearch {
    hosts => "http://elasticsearch:9200"
    index => "logs-%{+YYYY.MM.dd}"
    template => "/usr/share/logstash/config/index_templates/index_template.json"
    template_overwrite => "true"
    }
  elasticsearch {
    hosts => "http://elasticsearch:9200"
    index => "reporter"
	  template => "/usr/share/logstash/config/index_templates/index_template.json"
    template_overwrite => "true"
	  document_id => "%{source_ip}%{destination_ip}%{destination_port}%{direction}%{process_name}%{reporting_computer}"
    doc_as_upsert => true
    action => "update"
    manage_template => true
    retry_on_conflict => 5
    script => "if (ctx._source.counter == null) { ctx._source.counter = 1 } else { ctx._source.counter += 1}"
  }
  file {
    path => "/usr/share/logstash/data/logs-%{+YYYY.MM.dd.HH}.gz"
    gzip => true
  }
}

